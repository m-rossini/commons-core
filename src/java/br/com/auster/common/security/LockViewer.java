/*
 * Copyright (c) 2004-2005 Auster Solutions do Brasil. All Rights Reserved.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * Created on Apr 8, 2005
 */
package br.com.auster.common.security;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.MissingResourceException;
import java.util.zip.GZIPInputStream;

import br.com.auster.common.security.ResourceReady;



/**
 * @author framos
 * @version $Id$
 */
public class LockViewer {

	/***
	 * This Class is used just to view a resource content generated by GenerateResouce Class
	 * @param args
	 * The Expected Parameters are:
	 * 0-Full Path to Resource File
	 * @throws IOException
	 * @throws ClassNotFoundException
	 */
	public static void main(String[] args) throws IOException, ClassNotFoundException {
		FileInputStream fis = null;
		try {
			fis = new FileInputStream(args[0]);
		} catch (FileNotFoundException e) {
			throw new MissingResourceException("Resource not Found","","");
		}
		GZIPInputStream gis = new GZIPInputStream(fis);
		ObjectInputStream ois = new ObjectInputStream(gis);
		Object myObj = ois.readObject();
		ResourceReady rr = (ResourceReady) myObj;
		
		//Get the Array with Resource Data
		ArrayList array = (ArrayList) rr.getData();
		//Original Count
		Long count = (Long) array.get(0);
		Long currentCount = (Long) array.get(1);
		Calendar currentCalendar = (Calendar)array.get(2);
		Calendar generateCalendar = (Calendar)array.get(3);
		Calendar lastRunCalendar = (Calendar)array.get(4);
		Calendar limitCalendar = (Calendar)array.get(5);
		String productID = (String) array.get(6);
		Boolean canrun = (Boolean) array.get(7);
		Calendar firstRunCalendar = (Calendar)array.get(8);
    String ipMask = (String) array.get(9);
    String macAddress = (String) array.get(10);
		//Dump out Resource Data
		System.out.println("Original Count     =>" + count);
		System.out.println("Current Count      =>" + currentCount);
		System.out.println("Current Calendar   =>" + currentCalendar);
		System.out.println("Generated Calendar =>" + generateCalendar);
		System.out.println("Last Run Calendar  =>" + lastRunCalendar);
		System.out.println("Limit Calendar     =>" + limitCalendar);
		System.out.println("Product Id         =>" + productID);
		System.out.println("Can Run Var.       =>" + canrun);
		System.out.println("First Run Calendar =>" + firstRunCalendar);
    System.out.println("IP Mask              =>" + ipMask);
    System.out.println("Mac Address    =>" + macAddress);
	}
}
